/*
Deployment script for DB_A5A8F4_Hotels

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB_A5A8F4_Hotels"
:setvar DefaultFilePrefix "DB_A5A8F4_Hotels"
:setvar DefaultDataPath "H:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\Data\"
:setvar DefaultLogPath "H:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key b5821e3e-ba19-4100-a496-6270567dfb42 is skipped, element [dbo].[booked].[hotelid] (SqlSimpleColumn) will not be renamed to Hotelid';


GO
PRINT N'Rename refactoring operation with key 24e16052-4657-4ae9-8e14-1a85824884e6 is skipped, element [dbo].[Hotels].[Id] (SqlSimpleColumn) will not be renamed to ID';


GO
PRINT N'Rename refactoring operation with key a16ba480-e399-46c3-857c-6516ff06ee3c is skipped, element [dbo].[booked].[from] (SqlSimpleColumn) will not be renamed to From';


GO
PRINT N'Rename refactoring operation with key d50172b5-5d64-47fc-9142-f4e7755416d4 is skipped, element [dbo].[booked].[to] (SqlSimpleColumn) will not be renamed to To';


GO
PRINT N'Rename refactoring operation with key 22cacbf6-d9d5-46af-a1c9-a38e49b299cb, 360a4cec-52b7-4bb1-8f84-4b7a3e683576 is skipped, element [dbo].[booked].[Pa] (SqlSimpleColumn) will not be renamed to Passportid';


GO
PRINT N'Rename refactoring operation with key 4826f0da-fd05-44c1-ae61-9a977030b3aa is skipped, element [dbo].[booked].[Country] (SqlSimpleColumn) will not be renamed to City';


GO
PRINT N'Rename refactoring operation with key f847042f-4d9f-4a17-8e6f-c0aef1a86274 is skipped, element [dbo].[HotelsRoomsInfo].[Hid] (SqlSimpleColumn) will not be renamed to ID';


GO
PRINT N'Rename refactoring operation with key 3317d152-24a2-4262-8dc5-6d1df7e56d70 is skipped, element [dbo].[booked].[Hotelid] (SqlSimpleColumn) will not be renamed to HotelidRoom';


GO
PRINT N'Rename refactoring operation with key 142c3e88-12d0-4084-a0e5-fcf232dface5 is skipped, element [dbo].[booked].[RoomNuber] (SqlSimpleColumn) will not be renamed to RoomNumber';


GO
PRINT N'Creating [dbo].[booked]...';


GO
CREATE TABLE [dbo].[booked] (
    [ID]          INT          IDENTITY (1, 1) NOT NULL,
    [From]        DATETIME     NOT NULL,
    [To]          DATETIME     NOT NULL,
    [HotelidRoom] INT          NOT NULL,
    [Passportid]  VARCHAR (10) NOT NULL,
    CONSTRAINT [bookedPK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Descriptionn]...';


GO
CREATE TABLE [dbo].[Descriptionn] (
    [ID]      INT             IDENTITY (1, 1) NOT NULL,
    [Short]   NVARCHAR (600)  NOT NULL,
    [Long]    NVARCHAR (1500) NOT NULL,
    [Hotelid] INT             NOT NULL,
    CONSTRAINT [Pr_Key_DESC] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Hotels]...';


GO
CREATE TABLE [dbo].[Hotels] (
    [ID]   INT          IDENTITY (1, 1) NOT NULL,
    [Name] VARCHAR (50) NOT NULL,
    [City] VARCHAR (50) NOT NULL,
    CONSTRAINT [hotelsPK] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[HotelsRoomsInfo]...';


GO
CREATE TABLE [dbo].[HotelsRoomsInfo] (
    [HotelId]     INT      NOT NULL,
    [RoomNumber]  SMALLINT NOT NULL,
    [BedQuantity] TINYINT  NOT NULL,
    [Money]       MONEY    NOT NULL,
    [ID]          INT      IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PrKeyHotelInfo] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[PersonsInfo]...';


GO
CREATE TABLE [dbo].[PersonsInfo] (
    [Passportid]       VARCHAR (10)  NOT NULL,
    [Name]             NVARCHAR (20) NOT NULL,
    [Surname]          NVARCHAR (20) NOT NULL,
    [Gender]           NCHAR (1)     NOT NULL,
    [Email]            NVARCHAR (30) NOT NULL,
    [City]             NVARCHAR (20) NOT NULL,
    [CreditCardNumber] NVARCHAR (15) NOT NULL,
    [Country]          NVARCHAR (30) NOT NULL,
    CONSTRAINT [person_id] PRIMARY KEY CLUSTERED ([Passportid] ASC)
);


GO
PRINT N'Creating [dbo].[Pictures]...';


GO
CREATE TABLE [dbo].[Pictures] (
    [Id]      INT            IDENTITY (1, 1) NOT NULL,
    [Source]  NVARCHAR (150) NOT NULL,
    [Hotelid] INT            NOT NULL,
    CONSTRAINT [PicturesTableID] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Booked_to_Hotels_ref]...';


GO
ALTER TABLE [dbo].[booked] WITH NOCHECK
    ADD CONSTRAINT [Booked_to_Hotels_ref] FOREIGN KEY ([HotelidRoom]) REFERENCES [dbo].[HotelsRoomsInfo] ([ID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[reference_to_personInfo_info]...';


GO
ALTER TABLE [dbo].[booked] WITH NOCHECK
    ADD CONSTRAINT [reference_to_personInfo_info] FOREIGN KEY ([Passportid]) REFERENCES [dbo].[PersonsInfo] ([Passportid]);


GO
PRINT N'Creating [dbo].[Ref_DESCRIPTION_HOTEL]...';


GO
ALTER TABLE [dbo].[Descriptionn] WITH NOCHECK
    ADD CONSTRAINT [Ref_DESCRIPTION_HOTEL] FOREIGN KEY ([Hotelid]) REFERENCES [dbo].[Hotels] ([ID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[Hotels_Info]...';


GO
ALTER TABLE [dbo].[HotelsRoomsInfo] WITH NOCHECK
    ADD CONSTRAINT [Hotels_Info] FOREIGN KEY ([HotelId]) REFERENCES [dbo].[Hotels] ([ID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[Hotels_Info_Pictures]...';


GO
ALTER TABLE [dbo].[Pictures] WITH NOCHECK
    ADD CONSTRAINT [Hotels_Info_Pictures] FOREIGN KEY ([Hotelid]) REFERENCES [dbo].[Hotels] ([ID]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[Book]...';


GO
CREATE PROCEDURE [dbo].[Book]
	@passportId varchar(10),
	@name nvarchar(20),
	@surname nvarchar(20),
	@gender nchar(1),
	@email nvarchar(30),
	@city nvarchar(20),
	@country nvarchar(30),
	@creditCardNumber nvarchar(15),
	@from datetime,
	@to datetime,
	@HotelName varchar(50),
	@CityName varchar(50),
	@BedQuantity tinyint,
	@Money money
AS
	
	--we want to find any HotelRoomsINfo id for inserting in booked table

	DECLARE @HotelBookID int

	SET @HotelBookID = (select top 1
						h2.ID
						from Hotels as h1
						join HotelsRoomsInfo as h2
						on h1.ID = h2.HotelId
						where h1.City = @CityName and h1.[Name] = @HotelName and h2.[Money] = @Money and h2.BedQuantity = @BedQuantity)

	DECLARE @SuchPassportId int
	
	SET @SuchPassportId = (		select count(*)
								from PersonsInfo
								where Passportid = @passportId
							)
	IF @SuchPassportId = 0
	BEGIN
	INSERT INTO PersonsInfo([Name],[Surname],[Passportid],[Gender],[Email],[City],[Country],[CreditCardNumber])
	VALUES (@name, @surname, @passportId, @gender, @email, @city, @country,@creditCardNumber)
	END

	INSERT INTO booked([From],[To],[HotelidRoom],[Passportid])
	VALUES (@from, @to, @HotelBookID, @passportId)



RETURN 0
GO
PRINT N'Creating [dbo].[DeleteHotel]...';


GO
CREATE PROCEDURE [dbo].[DeleteHotel]
	@HotelName varchar(50),
	@CityName varchar(50)
AS
	
	DELETE from Hotels
	WHERE ID = (SELECT ID
				FROM Hotels as h
				WHERE h.[Name] = @HotelName AND h.[City] = @CityName)
GO
PRINT N'Creating [dbo].[getRoomInfoPicture]...';


GO
CREATE PROCEDURE [dbo].[getRoomInfoPicture]
	@id int
AS
	select res1.[Name] as HotelName,res2.[Source] as Nkar,res3.Long as Long 
	from Hotels as res1
	join Pictures as res2
	on res1.ID = res2.Hotelid
	join Descriptionn as res3
	on res1.ID = res3.Hotelid
	where res1.ID = @id


RETURN 0
GO
PRINT N'Creating [dbo].[InsertDescription]...';


GO
CREATE PROCEDURE [dbo].[InsertDescription]
	@HotelName varchar(50),
	@CityName varchar(50),
	@ShortDescription nvarchar(600),
	@LongDescription nvarchar(1500)
AS

	DECLARE @HoteliD int
	DECLARE @CountInDesc int
	Set @HoteliD = (SELECT ID FROM Hotels Where [Name] = @HotelName AND [City] = @CityName)
	SET @CountInDesc = isnull((SELECT COUNT(*) FROM Descriptionn WHERE Hotelid = @HoteliD),0)

	IF @CountInDesc = 1
	BEGIN
		RAISERROR ( 'Whoops, Such Hotel Description already Exsists',18,1)		
	END
	ELSE
	BEGIN
		INSERT INTO Descriptionn([Short],[Long],[Hotelid])
			VALUES (@ShortDescription, @LongDescription, @HoteliD);
	END
GO
PRINT N'Creating [dbo].[InsertFromWindow]...';


GO
CREATE PROCEDURE [dbo].[InsertFromWindow]
	@HotelName varchar(50),
	@CityName varchar(50),
	@RoomNumber smallint,
	@BedQuantity tinyint,
	@Money money
	
AS
	BEGIN TRANSACTION;
--ete masnachyux chka,@HotID -n klini 0, piti insert anenq
	DECLARE @HotID int

	Set @HotID = isnull((SELECT h.ID FROM Hotels h WHERE h.City = @CityName AND h.[Name] = @HotelName),0)


	IF @HotID = 0
	BEGIN
		INSERT INTO Hotels([Name], [City])
			VALUES (@HotelName, @CityName);

	SET @HotID = SCOPE_IDENTITY()
	END
--hima piti stugenq tenc hamari senyakn ka mer hotel-um te voch
--bayc ete stugum enq u tesnum enq vor ka, RAISERROR enq anum

--	RAISERROR ( 'Whoops, Such Hotel Room already Exsists',1,1)

		
       IF EXISTS  (select RoomNumber
				    from HotelsRoomsInfo
				    where HotelId = @HotID AND RoomNumber = @RoomNumber)
		BEGIN
		RAISERROR ( 'Whoops, Such Hotel Room already Exsists',18,1)
		END
		ELSE
		BEGIN
		INSERT INTO HotelsRoomsInfo([HotelId],[BedQuantity],[RoomNumber],[Money])
				Values (@HotID, @BedQuantity, @RoomNumber, @Money);
		END
	COMMIT TRANSACTION;
GO
PRINT N'Creating [dbo].[InsertPicture]...';


GO
CREATE PROCEDURE [dbo].[InsertPicture]
	@HotelName varchar(50),
	@CityName varchar(50),
	@PicUrl nvarchar(150)
AS

	DECLARE @HoteliD int

	SET @HoteliD = (SELECT ID
					FROM Hotels
					Where [Name] = @HotelName AND [City] = @CityName)

	INSERT INTO Pictures([Hotelid],[Source])
		VALUES (@HoteliD, @PicUrl);
GO
PRINT N'Creating [dbo].[ReservedRoom]...';


GO
CREATE PROCEDURE [dbo].[ReservedRoom]

AS
	select h1.[Name] as HotelName,h1.City as City,h2.BedQuantity as BedQuantity,[Money], b.Passportid as Passportid
	from Hotels as h1
	join HotelsRoomsInfo as h2
	on h1.ID = h2.HotelId
	join booked as b
	on b.HotelidRoom = h2.ID
	join PersonsInfo as p
	on p.Passportid = b.Passportid
GO
PRINT N'Creating [dbo].[SearchResultForWeb]...';


GO
CREATE PROCEDURE [dbo].[SearchResultForWeb]
	@HotelName varchar(50),
	@CityName varchar(50),
	@From datetime,
	@To datetime = null,
	@BedQuantity tinyint
AS

	SET @BedQuantity = nullif(@BedQuantity ,0)

	IF LEN(@CityName) = 0
	BEGIN
	SET @CityName = null
	END

	IF LEN(@HotelName)= 0
	BEGIN
	SET @HotelName = null
	END
	


	SELECT *
	FROM   (
			SELECT  res1.ID as HOTELID, res1.[Name], res1.City, res2.[Source], res3.Short, res3.Long,
							ROW_NUMBER() OVER(PARTITION BY res1.ID ORDER BY res1.ID) as toPrint
			FROM Hotels as res1
			JOIN Pictures as res2
			ON res1.ID = res2.Hotelid
			JOIN Descriptionn as res3
			ON res1.ID = res3.Hotelid
			WHERE res1.ID IN
				(	
					select DISTINCT t1.ID
					from Hotels as t1
					join HotelsRoomsInfo as t2
					ON t1.ID = t2.HotelId
					where t2.ID IN (
										select h3.ID
										from Hotels as h4
										join HotelsRoomsInfo as h3
										on h4.ID = h3.HotelId
										where h4.[Name] = isnull(@HotelName,h4.[Name]) and h4.City = isnull(@CityName,h4.City)
															and h3.BedQuantity = isnull(@BedQuantity,h3.BedQuantity)
										EXCEPT
										(
										select h2.ID as reservedRoomsIds
										from Hotels as h1
										join HotelsRoomsInfo as h2
										on h1.ID = h2.HotelId
										join booked as b
										on b.HotelidRoom = h2.ID
										where (@To IS NOT NULL AND h1.[Name] = isnull(@HotelName,h1.[Name]) and h1.City = isnull(@CityName,h1.City) and
												h2.BedQuantity = isnull(@BedQuantity,h2.BedQuantity) and 
												(
															(@From <= b.[From] and  @To > b.[From])
															OR (@From >= b.[From] and @From < b.[To])
												)
											)
											OR
											( @To IS NULL AND
											h1.[Name] = isnull(@HotelName,h1.[Name]) and h1.City = isnull(@CityName,h1.City) and
															h2.BedQuantity = isnull(@BedQuantity,h2.BedQuantity) and 
															(
																		(@From <= b.[From])
																		OR (@From >= b.[From] and @From < b.[To])
															)
												)
							
										group by h2.ID
										)
									)
				)

			)as kkk
	where kkk.toPrint = 1
GO
PRINT N'Creating [dbo].[SearchST]...';


GO
CREATE PROCEDURE [dbo].[SearchST]
	@HotelName varchar(50),
	@CityName varchar(50),
	@From datetime,
	@To datetime = null,
	@BedQuantity tinyint
AS

	SET @BedQuantity = nullif(@BedQuantity ,0)

	IF LEN(@CityName) = 0
	BEGIN
	SET @CityName = null
	END

	IF LEN(@HotelName)= 0
	BEGIN
	SET @HotelName = null
	END
	
	

	select t1.[Name] as HotelName, t1.City as CityName , t2.BedQuantity as Bed, t2.RoomNumber, t2.[Money]
	from Hotels as t1
	join HotelsRoomsInfo as t2
	ON t1.ID = t2.HotelId
	where t2.ID IN (
						select h3.ID
						from Hotels as h4
						join HotelsRoomsInfo as h3
						on h4.ID = h3.HotelId
						where h4.[Name] = isnull(@HotelName,h4.[Name]) and h4.City = isnull(@CityName,h4.City)
											and h3.BedQuantity = isnull(@BedQuantity,h3.BedQuantity)
						EXCEPT
						(
						select h2.ID as reservedRoomsIds
						from Hotels as h1
						join HotelsRoomsInfo as h2
						on h1.ID = h2.HotelId
						join booked as b
						on b.HotelidRoom = h2.ID
						where (@To IS NOT NULL AND h1.[Name] = isnull(@HotelName,h1.[Name]) and h1.City = isnull(@CityName,h1.City) and
								h2.BedQuantity = isnull(@BedQuantity,h2.BedQuantity) and 
								(
											(@From <= b.[From] and  @To > b.[From])
											OR (@From >= b.[From] and @From < b.[To])
								)
							)
							OR
							( @To IS NULL AND
							h1.[Name] = isnull(@HotelName,h1.[Name]) and h1.City = isnull(@CityName,h1.City) and
											h2.BedQuantity = isnull(@BedQuantity,h2.BedQuantity) and 
											(
														(@From <= b.[From])
														OR (@From >= b.[From] and @From < b.[To])
											)
								)
						group by h2.ID
						)
					)
		--group by t1.[Name], t1.City, t2.BedQuantity, t2.[Money]									
GO
PRINT N'Creating [dbo].[FreeRoomsCertainHotel]...';


GO
CREATE PROCEDURE [dbo].[FreeRoomsCertainHotel]
	@HotelName varchar(50),
	@CityName varchar(50),
	@From datetime,
	@To datetime = null,
	@BedQuantity tinyint
AS
	
	declare @t table(HotelName nchar(20), City nchar(20), Bed tinyint, Room smallint, [Money] money)
	insert @t
	exec SearchST @HotelName, @CityName, @From, null, null

	select Bed,[Money]
	from @t
	group by Bed,[Money]
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '24e16052-4657-4ae9-8e14-1a85824884e6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('24e16052-4657-4ae9-8e14-1a85824884e6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a16ba480-e399-46c3-857c-6516ff06ee3c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a16ba480-e399-46c3-857c-6516ff06ee3c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd50172b5-5d64-47fc-9142-f4e7755416d4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d50172b5-5d64-47fc-9142-f4e7755416d4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '22cacbf6-d9d5-46af-a1c9-a38e49b299cb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('22cacbf6-d9d5-46af-a1c9-a38e49b299cb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b5821e3e-ba19-4100-a496-6270567dfb42')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b5821e3e-ba19-4100-a496-6270567dfb42')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '360a4cec-52b7-4bb1-8f84-4b7a3e683576')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('360a4cec-52b7-4bb1-8f84-4b7a3e683576')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4826f0da-fd05-44c1-ae61-9a977030b3aa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4826f0da-fd05-44c1-ae61-9a977030b3aa')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f847042f-4d9f-4a17-8e6f-c0aef1a86274')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f847042f-4d9f-4a17-8e6f-c0aef1a86274')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3317d152-24a2-4262-8dc5-6d1df7e56d70')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3317d152-24a2-4262-8dc5-6d1df7e56d70')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '142c3e88-12d0-4084-a0e5-fcf232dface5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('142c3e88-12d0-4084-a0e5-fcf232dface5')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/



EXEC InsertFromWindow 'Marriot','Yerevan' ,1, 1, 17000
EXEC InsertFromWindow 'Marriot','Yerevan' ,2, 1, 17000
EXEC InsertFromWindow 'Marriot','Yerevan' ,3, 1, 110000


EXEC InsertFromWindow 'Hilton Hotel','Yerevan' ,1, 1, 17000
EXEC InsertFromWindow 'Hilton Hotel','Yerevan' ,2, 3, 47000
EXEC InsertFromWindow 'Hilton Hotel','Yerevan' ,3, 3, 490000
EXEC InsertFromWindow 'Hilton Hotel','Yerevan' ,4, 3, 49000
EXEC InsertFromWindow 'Hilton Hotel','Yerevan' ,5, 2, 47000



EXEC InsertFromWindow 'Marriot','Yerevan' ,4, 3, 37000
EXEC InsertFromWindow 'Marriot','Yerevan' ,5, 2, 28000
EXEC InsertFromWindow 'Marriot','Yerevan' ,6, 2, 28000
EXEC InsertFromWindow 'Marriot','Yerevan' ,7, 2, 5400000
EXEC InsertFromWindow 'Marriot','Yerevan' ,8, 2, 540000
EXEC InsertFromWindow 'Marriot','Yerevan' ,9, 2, 28000


EXEC InsertFromWindow 'Raddison Blu','Sochi' ,1, 1, 17000
EXEC InsertFromWindow 'Raddison Blu','Sochi' ,2, 3, 47000
EXEC InsertFromWindow 'Raddison Blu','Sochi' ,3, 3, 490000
EXEC InsertFromWindow 'Raddison Blu','Sochi' ,4, 3, 49000
EXEC InsertFromWindow 'Raddison Blu','Sochi' ,5, 2, 47000

/*

INSERT INTO PersonsInfo
VALUES 
('1111', 'aaa','sss','F','asas','assa','sacasc','hhh'),
('2222', 'aaa','sss','F','asas','assa','sacasc','jjl'),
('3333', 'aaa','sss','F','asas','assa','sacasc','jbj'),
('4444', 'aaa','sss','F','asas','assa','sacasc','hjbhj')


INSERT INTO booked
VALUES ('2020-03-06', '2020-03-15', 1, '1111'),
		('2020-03-02', '2020-03-14', 2, '2222'),
		('2020-03-07', '2020-03-09', 3, '3333'),
		('2020-03-06', '2020-03-15', 6, '4444')

*/		
INSERT INTO Pictures
VALUES ('/photos/Marriott/img0.jpg', 1),
		('/photos/Marriott/img1.jpg', 1),
		('/photos/Marriott/img2.jpg', 1),
		('/photos/Marriott/img3.jpg', 1),
		('/photos/Marriott/img4.jpg', 1),
		('/photos/Marriott/img5.jpg', 1),
		('/photos/Marriott/img6.jpg', 1),
		('/photos/HiltonHotel/img0.jpg', 2),
		('/photos/HiltonHotel/img1.jpg', 2),
		('/photos/HiltonHotel/img2.jpg', 2),
		('/photos/HiltonHotel/img3.jpg', 2),
		('/photos/HiltonHotel/img4.jpg', 2),
		('/photos/HiltonHotel/img5.jpg', 2),
		('/photos/HiltonHotel/img6.jpg', 2),
		('/photos/Radisson Blu/img0.jpg', 3),
		('/photos/Radisson Blu/img1.jpg', 3),
		('/photos/Radisson Blu/img2.jpg', 3),
		('/photos/Radisson Blu/img3.jpg', 3),
		('/photos/Radisson Blu/img4.jpg', 3),
		('/photos/Radisson Blu/img5.jpg', 3),
		('/photos/Radisson Blu/img6.jpg', 3)
		




GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[booked] WITH CHECK CHECK CONSTRAINT [Booked_to_Hotels_ref];

ALTER TABLE [dbo].[booked] WITH CHECK CHECK CONSTRAINT [reference_to_personInfo_info];

ALTER TABLE [dbo].[Descriptionn] WITH CHECK CHECK CONSTRAINT [Ref_DESCRIPTION_HOTEL];

ALTER TABLE [dbo].[HotelsRoomsInfo] WITH CHECK CHECK CONSTRAINT [Hotels_Info];

ALTER TABLE [dbo].[Pictures] WITH CHECK CHECK CONSTRAINT [Hotels_Info_Pictures];


GO
PRINT N'Update complete.';


GO
